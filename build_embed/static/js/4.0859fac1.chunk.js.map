{"version":3,"sources":["components/ui/Header/Header.module.scss","components/global/LanguageSelector/LanguageSelector.module.scss","components/ui/Navigation/Navigation.lazy.tsx","components/global/LanguageSelector/LanguageSelector.tsx","components/ui/Header/Header.tsx"],"names":["module","exports","LazyNavigation","lazy","Navigation","props","fallback","Loading","LanguageSelector","i18n","useTranslation","React","useState","active","lng","language","state","setState","changeLang","e","value","target","changeLanguage","useEffect","className","styles","currentLng","SvgIcon","id","width","options","lc","name","map","l","Button","label","onClick","TopScroll","Header","window","addEventListener","handleScroll","passive","removeEventListener","scrollY","up","collapse","variant","bg","style","backgroundImage","filter","content","logo","navRoute","src","i","icon","title","navigation","history","checkScroll","topScroll","scrollTo","top","behavior"],"mappings":"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","file":"static/js/4.0859fac1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__1W5yz\",\"fat\":\"Header_fat__1RGhn\",\"content\":\"Header_content__2Ce13\",\"logo\":\"Header_logo__1G1nS\",\"icon\":\"Header_icon__2fzO7\",\"title\":\"Header_title__3AIJX\",\"bg\":\"Header_bg__1XkkV\",\"topScroll\":\"Header_topScroll__vjdGs\",\"active\":\"Header_active__JkQlM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LanguageSelector\":\"LanguageSelector_LanguageSelector__pACPG\",\"options\":\"LanguageSelector_options__1I4o3\",\"active\":\"LanguageSelector_active__1BPFc\"};","import React, { lazy, Suspense } from 'react';\nimport Loading from 'components/global/Loading/Loading';\n\nconst LazyNavigation = lazy(() => import('./Navigation'));\n\ntype Props = any; \nconst Navigation = (props: JSX.IntrinsicAttributes & Props & { children?: React.ReactNode; }) => (\n  <Suspense fallback={<Loading />}>\n    <LazyNavigation {...props} />\n  </Suspense>\n);\n\nexport default Navigation;\n","import React from 'react';\nimport SvgIcon from 'components/ui/SvgIcon/SvgIcon';\nimport styles from './LanguageSelector.module.scss';\nimport { useTranslation } from 'react-i18next';\nimport Button from 'components/ui/Button/Button';\n\nconst LanguageSelector: React.FC = () => {\n  const { i18n } = useTranslation()\n  const langs = [\n    { lc: 'da', name: 'Dansk' }, \n    { lc: 'en', name: 'English' }\n  ];\n\n  const [state, setState] = React.useState({\n    active: false,\n    lng: i18n.language || 'da',\n  });\n\n  React.useEffect(() => {\n    setState({\n      ...state,\n      lng: i18n.language,\n    })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[i18n.language])\n\n  function changeLang(e: any) {\n    const { value } = e.target;\n\n    i18n.changeLanguage(value)\n  }\n  return (\n    <div className={styles.LanguageSelector} data-testid=\"LanguageSelector\">\n      <div className={styles.currentLng}>\n      <SvgIcon {...{ id: 'globe',width: '1em'}} /><span> {state.lng}</span>\n      </div>\n      <div className={styles.options}>\n        <ul>\n        {langs.map((l) => \n          <li key={l.lc}>\n            <Button label={l.name} value={l.lc} onClick={changeLang} />\n          </li>\n        )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default LanguageSelector;\n","import React from 'react';\nimport styles from './Header.module.scss';\n\nimport { history, navRoute } from '_libs/_helpers'\n\nimport Navigation from '../Navigation/Navigation.lazy';\nimport SvgIcon from '../SvgIcon/SvgIcon';\nimport LanguageSelector from 'components/global/LanguageSelector/LanguageSelector';\n\nconst Header: React.FC<any> = (props) => {\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll, { passive: true });\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  })\n\n  const [state, setState] = React.useState(\n    {\n      scrollY: 0,\n      up: false,\n      collapse: false,\n    }\n  )\n  function handleScroll(e: Event) {\n    // console.log(state.scrollY > window.scrollY)\n    // console.log(state.scrollY === window.scrollY)\n\n    setState(\n      { ...state,\n        scrollY: window.scrollY,\n        up: state.scrollY > window.scrollY,\n        collapse: true\n      }\n    )\n    // console.log('scroll', e)\n  }\n  return (\n    <div id=\"header\" className={`${styles.Header} ${styles[props.variant]} ${state.collapse ? styles.collapse : ''}`} data-testid={`Headertest`} \n    // {...props}\n    >\n    <div \n    className={styles.bg} \n    style={props.backgroundImage ? {backgroundImage: `url(${props.backgroundImage})`} : {}}>\n    </div>\n    <div className={styles.filter}>\n    </div>\n    <div className={styles.content}>\n        <LanguageSelector />\n      {props.logo &&\n          <div className={styles.logo} onClick={() => { navRoute('/') }}>\n            {props.logo.map((src: {id: string, url: string;}, i: number) =>\n              <div key={src.id} className={styles.icon}>\n              <SvgIcon {...{id: src.id}} />\n              </div>\n            )}\n          </div>}\n      {props.title && <h1 className={`${styles.title} font-face-themed-title`}>{`${props.title}`}</h1>}\n      {props.navigation && <Navigation history={history} />}\n    </div>\n    {props.variant !== 'embed' && <TopScroll /> }\n  </div>\n);\n}\n\nexport default Header;\n\nconst TopScroll: React.FC = () => {\n  const [state, setState ] = React.useState({\n    active: false\n  });\n  React.useEffect(()=> {\n    function checkScroll(){\n      setState({\n        active: window.scrollY !== 0 ? true : false,\n      })\n    }\n    window.addEventListener('scroll',checkScroll)\n    return () => { window.removeEventListener('scroll', checkScroll)}\n  },[])\n  function scrollToTop() {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }\n  return (\n    <div className={`${styles.topScroll} ${state.active && styles.active}`} aria-label=\"Scroll to Top\" onClick={scrollToTop} />\n  )\n}"],"sourceRoot":""}