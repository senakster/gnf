{"version":3,"sources":["components/ui/LeafletBase/LeafletBase.module.scss","components/ui/LeafletBase/GeoData/ModalContent.module.scss","_libs/_config/index.ts","components/ui/LeafletBase/GeoData/GeoData.tsx","components/ui/LeafletBase/GeoData/ModalContent.tsx","components/ui/LeafletBase/MapControls/MapControls.tsx","components/ui/LeafletBase/LeafletBase.tsx","components/views/Map/Map.tsx"],"names":["module","exports","data","config","version","PackageJson","GeoData","grupper","attribution","setModalContent","React","useState","municipality","ui","setUI","theme","useTheme","emptyColor","defaultFill","primaryColor","highlightFill","secondaryDarkColor","mapStroke","text","map","useMap","kommuneClick","event","bbox","properties","target","feature","groups","filter","gg","name","toUpperCase","indexOf","coords","geometry","coordinates","flat","lats","lngs","i","length","push","minlat","Math","min","apply","maxlat","max","getBboxFromCoords","fitBounds","mouseoverColor","setStyle","fillColor","fillOpacity","weight","mouseleaveColor","useEffect","bounds","Denmark","setMaxBounds","GeoJSON","municipalitiesGeoJSON","onEachFeature","layer","bindTooltip","options","color","on","click","mouseover","mouseout","ModalContent","t","useTranslation","className","styles","listContent","g","links","_embedded","grouplinks","grouptype","icon","SvgIcon","width","id","logo","groupName","icons","l","href","url","rel","join","contact","email","facebook","joinText","MapControls","parentMap","snaptobounds","dispatch","useStateContext","locationError","e","title","message","code","console","log","type","ActionType","NEW_MESSAGE","payload","body","mapY","document","getElementById","locationFound","flyTo","latlng","animate","duration","window","scrollTo","top","offsetTop","left","behavior","defaultZoom","attributionControl","addAttribution","app","addEventListener","removeEventListener","POSITION_CLASSES","flyToBounds","onClick","locate","timeout","LeafletBase","variant","state","c","L","LatLng","centerDefault","lat","lng","updated","MapContainer","mapContainer","center","zoom","scrollWheelZoom","dragging","SET_MODAL","Loading","Map"],"mappings":"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","file":"static/js/4.02f93ae5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LeafletBase\":\"LeafletBase_LeafletBase__V81KW\",\"embed-logo\":\"LeafletBase_embed-logo__1tOjz\",\"mapContainer\":\"LeafletBase_mapContainer__3KhQo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalContent\":\"ModalContent_ModalContent__2qyRF\",\"listContent\":\"ModalContent_listContent__Zv2c0\",\"municipality\":\"ModalContent_municipality__3Zi-6\",\"groupName\":\"ModalContent_groupName__3t07K\",\"icons\":\"ModalContent_icons__1rN6M\",\"joinText\":\"ModalContent_joinText__aZdoQ\",\"linkIcon\":\"ModalContent_linkIcon__1oOA5\",\"logo\":\"ModalContent_logo__3KAnO\",\"icon\":\"ModalContent_icon__2MREL\"};","import config from './config.json'\nimport PackageJson from '../../../package.json';\nconst data = { ...config, version: PackageJson.version }\nexport default data;","import React from 'react'\n// import ReactDOMServer from 'react-dom/server';\nimport config from '_libs/_config/config.json'\nimport { FeatureCollection } from 'geojson';\nimport { \n    // FeatureGroup, \n    LatLngBoundsExpression } from 'leaflet';\nimport municipalitiesGeoJSON from '_libs/_data/denmark-municipalities.json'\n// import { useTranslation } from 'react-i18next';\nimport { useMap, GeoJSON } from 'react-leaflet';\nimport { DefaultTheme, useTheme } from 'styled-components';\n// import PopContent from './PopContent';\n\n\nconst GeoData: React.FC<{ grupper: TGNFG[], attribution: string, setModalContent: (data: any) => void }> = ({ grupper, attribution, setModalContent }) => {\n    // const { t, ready } = useTranslation('map');\n    const [ ui, setUI ] = React.useState({\n        municipality: false,\n    })\n    const theme = useTheme() as DefaultTheme & {\n        body: string,\n        text: string,\n        primaryColor: string,\n        secondaryColor: string,\n        primaryDarkColor: string,\n        secondaryDarkColor: string,\n    }\n    const gnfgreen: string = \"#1db954\"\n    // const defaultFill = '#a1d100';\n    const emptyColor = 'beige' || 'white';\n    const defaultFill = theme.primaryColor || gnfgreen\n    const highlightFill = theme.secondaryDarkColor || `dodgerblue` || theme.secondaryColor\n    const mapStroke = theme.text || defaultFill\n    // const map = useMapEvents({\n    //   click: (e) => {\n    //     console.log(e)\n    //   }\n    // });\n    const map = useMap()\n\n    React.useEffect(() => {\n        const bounds = (config.map.bounds.Denmark as LatLngBoundsExpression)\n        map.setMaxBounds(bounds)\n        // map.fitBounds(bounds)\n        // map.setMinZoom(map.getZoom() - .5)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    function getBboxFromCoords(event: L.LeafletMouseEvent) {\n        const coords = event.target.feature.geometry.coordinates.flat().flat()\n        var lats = []; var lngs = [];\n        for (var i = 0; i < coords.length; i++) {\n            lats.push(coords[i][1]);\n            lngs.push(coords[i][0]);\n        }\n        // calc the min and max lng and lat\n        var minlat = Math.min.apply(null, lats),\n            maxlat = Math.max.apply(null, lats);\n        var minlng = Math.min.apply(null, lngs),\n            maxlng = Math.max.apply(null, lngs);\n\n        // create a bounding rectangle that can be used in leaflet\n        const bbox = [[minlat, minlng], [maxlat, maxlng]] as [[lat: number, lng: number], [lat: number, lng: number]];\n        return bbox;\n    }\n\n    function fitBounds(bbox: [[lat: number, lng: number], [lat: number, lng: number]]) {\n        map.fitBounds(bbox)\n    }\n\n    function kommuneClick(event: L.LeafletMouseEvent) {\n        const { properties } = event.target.feature;\n        const groups = grupper?.filter((gg) =>\n            properties.name.toUpperCase().indexOf(gg.municipality.toUpperCase()) !== -1\n        )\n        setUI({\n            ...ui,\n            municipality: properties.name\n        })\n        // console.log('kommuneClick', properties)\n        setModalContent({municipality: properties.name, groups})\n        fitBounds(getBboxFromCoords(event))\n    }\n    function mouseoverColor(event: L.LeafletMouseEvent) {\n        // console.log(event.target.setStyle);\n        event.target.setStyle({\n            fillColor: highlightFill,\n            fillOpacity: 1,\n            weight: 5\n        })\n    }\n    function mouseleaveColor(event: L.LeafletMouseEvent) {\n        const groups = grupper?.filter((gg) =>\n            event.target.feature.properties.name.toUpperCase().indexOf(gg.municipality.toUpperCase()) !== -1\n            // compare(gg.municipality, event.target.feature.properties.name)\n        );\n        event.target.setStyle({\n            fillColor: groups.length > 0 ? defaultFill : emptyColor,\n            fillOpacity: groups.length > 0 ? .5 + .1 * groups.length : 1,\n            weight: 3\n        })\n    }\n\n    /**\n     * \n     * @param data {GEOJSON loop}\n     * @param layer {Leaflet Layer}\n     */\n    function onEachMunicipality(data: any, layer: L.Layer | any) {\n        // console.log(data);\n        // Groups Matching Municipality\n        const groups = grupper?.filter((gg) =>\n            data.properties.name.toUpperCase().indexOf(gg.municipality.toUpperCase()) !== -1\n        )\n        //   gg.municipality.toUpperCase() === data.properties.name.toUpperCase() || \n        //   gg.municipality.toUpperCase() === `${data.properties.name.toUpperCase()} KOMMUNE` ||\n        //   gg.municipality.toUpperCase() === `${data.properties.name.toUpperCase()}S KOMMUNE`\n        // );\n\n\n        // console.log(data, grupper);\n\n        // groups.length > 0 && \n        // layer.bindPopup(ReactDOMServer.renderToString(<PopContent {{ ...name: data.properties.name, groups: groups, t }} />))\n\n        /** TOOLTIP */\n        // layer.bindTooltip(`${data.properties.name}: ${groups.length} ${groups.length === 1 ? 'gruppe' : 'grupper'}`)\n        layer.bindTooltip(`${data.properties.name}`)\n\n        layer.options = {\n            ...layer.options,\n            color: mapStroke,\n            fillColor:  groups.length > 0 ? defaultFill : emptyColor,\n        }\n\n        layer.options = groups.length > 0 ? {\n            ...layer.options,\n            fillOpacity: .5 + .1 * groups.length\n        } :\n            {\n                ...layer.options,\n                fillOpacity: 1,\n            }\n\n        layer.on(\n            {\n                click: kommuneClick,\n                mouseover: mouseoverColor,\n                mouseout: mouseleaveColor\n            }\n        )\n        // console.log(layer)\n    }\n    function onEachMunicipality_noGroups(data: any, layer: L.Layer | any) {\n        layer.bindTooltip(`${data.properties.name}`)\n        layer.options = {\n            ...layer.options,\n            color: mapStroke,\n            fillColor: defaultFill,\n            fillOpacity: .5,\n        }\n    }\n    return (\n    <GeoJSON \n    attribution={attribution} \n    data={(municipalitiesGeoJSON as FeatureCollection)} \n    onEachFeature={onEachMunicipality}\n    // onEachFeature={onEachMunicipality_noGroups}\n    />)\n\n}\nexport default GeoData","// import Button from 'components/ui/Button/Button'\nimport SvgIcon from 'components/ui/SvgIcon/SvgIcon'\nimport { logo } from '_libs/_media/img/images.json'\nimport config from '_libs/_config/config.json'\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styles from './ModalContent.module.scss'\n// import { useMap } from 'react-leaflet'\nconst ModalContent: React.FC<any> = ({municipality, groups }) => {\n    const { t } = useTranslation('map')\n\n    React.useEffect(() => {\n        // data ? lockMap() : unlockMap()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    return (\n            <div className={styles.ModalContent}>\n                <h1 className={styles.municipality}>{`${municipality ? `${municipality}: ` : ''}`}</h1>\n                <div className={styles.listContent}>\n                <ul>\n                    {groups?.map && groups.map((g: TGNFG) => {\n                        const links: TLink[] = g._embedded?.grouplinks || []\n                        return (\n                            <li key={g.id} className={`${styles[g.grouptype]}`}>\n                                <div className={styles.icon}>\n                                    <SvgIcon width={`2.5em`} {...{ id: logo.id }} />\n                                </div>\n                                <span className={`${styles.groupName} `}>{g.name}</span>\n                                <div className={styles.icons}>\n                                    {links.map((l: TLink, i: number) =>\n                                        <a key={i} href={`${l.url}`} rel=\"noreferrer\" target=\"_blank\">\n                                            <SvgIcon width={`2.5em`} {...{ id: l.name || 'linkicon  ' }} />\n                                        </a>\n                                    )}\n\n                                </div>\n                            </li>\n                        )\n                    })}\n                    <li className={styles.join}>\n                        <h1>+</h1>\n                        <span>{t('group.join')}</span>\n                        <div className={styles.icons}>\n                            <a href={`mailto:${config.contact.email}`} rel=\"noreferrer\" target=\"_blank\">\n                                <SvgIcon width={`2.5em`}{...{ id: 'email' }} />\n                            </a>\n                            <a href={config.contact.facebook} rel=\"noreferrer\" target=\"_blank\">\n                                <SvgIcon width={`2.5em`} {...{ id: 'facebook' }} />\n                            </a>\n                        </div>\n\n                    </li>\n                </ul>\n                <div className={styles.joinText}>\n                        {t('group.contactUs')}: <br />\n                        <a href={`mailto:${config.contact.email}`}>info@omstilling.nu</a><br />\n                        {t('w.or')}<br />\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`${config.contact.facebook}`}>www.facebook.com/groennenabofaellesskaber</a><br />\n                </div>\n                </div>\n            </div>\n    )\n}\n\nexport default ModalContent","import React from 'react'\nimport { useMap } from \"react-leaflet\"\nimport { useStateContext } from \"_libs/_state\"\nimport { ActionType } from \"_libs/_state/reducers/messageReducer\"\nimport config from '_libs/_config'\nimport { LatLngBoundsExpression } from 'leaflet'\n\n\nconst MapControls: React.FC = () => {\n    const parentMap = useMap()\n    const snaptobounds = (config.map.snaptobounds.Denmark as LatLngBoundsExpression)\n\n    const { dispatch } = useStateContext()\n\n    function logMessage(title?: string, message?: string) {\n        console.log(title, message)\n        dispatch && dispatch({\n            type: ActionType.NEW_MESSAGE,\n            payload: {\n                title: title,\n                body: message,\n            }\n        })\n    }\n\n    function locationError(e: any) {\n        logMessage('Fejl: ', `${e.message} | Error Code: ${e.code}`);\n    }\n\n    React.useEffect(() => {\n        const mapY = document.getElementById('LeafletBase')\n        defaultZoom();\n\n        function locationFound(e: { latlng: L.LatLng, bounds: L.LatLngBounds }) {\n            parentMap.flyTo(e.latlng, 11, {\n                animate: true,\n                duration: .25\n            });\n            window.scrollTo({\n                top: mapY?.offsetTop || 0,\n                left: 0,\n                behavior: 'smooth'\n            });\n        }\n\n\n        // ATTRIBUTIONS\n        parentMap.attributionControl.addAttribution('<a target=\"_blank\" rel=\"noreferrer\" href=\"//github.com/senakster/gnf\">github</a>');\n        // parentMap.attributionControl.addAttribution('<a href=\"mailto:senakster@gmail.com\">Emil Nakayama</a>');\n        parentMap.attributionControl.addAttribution(`v: ${config.app.version}`);\n\n        // GPS EVENTSLISTENERS\n        parentMap.addEventListener('locationfound', locationFound)\n        parentMap.addEventListener('locationerror', locationError)\n        return () => {\n            parentMap.removeEventListener('locationfound', locationFound)\n            parentMap.removeEventListener('locationerror', locationError)\n        };\n        // Disable lint - controlling rerenders\n        // eslint-disable-next-line react-hooks/exhaustive-deps \n    }, [])\n\n    const POSITION_CLASSES = {\n        bottomleft: 'leaflet-bottom leaflet-left',\n        bottomright: 'leaflet-bottom leaflet-right',\n        topleft: 'leaflet-top leaflet-left',\n        topright: 'leaflet-top leaflet-right',\n    }\n\n    function defaultZoom() {\n        parentMap.flyToBounds(snaptobounds, { duration: .25 })\n        const mapY = document.getElementById('LeafletBase')\n        window.scrollTo({\n            top: mapY?.offsetTop || 0,\n            left: 0,\n            behavior: 'smooth'\n        });\n    }\n\n    function whereAmI() {\n        parentMap.locate({\n            timeout: 2000,\n        })\n    }\n    return (\n        <>\n            <div className={POSITION_CLASSES.topright}>\n                <div className=\"leaflet-control leaflet-bar\">\n                    <span onClick={defaultZoom} className=\"leaflet-control-zoom-in mapControl\" title=\"Default Zoom\" aria-label=\"Default Zoom\"><i className=\"material-icons\">fullscreen</i></span>\n                    <span onClick={whereAmI} className=\"leaflet-control-zoom-in mapControl\" title=\"Locate\" aria-label=\"Locate\"><i className=\"material-icons\">my_location</i></span>\n                </div>\n            </div>\n            <div className={POSITION_CLASSES.bottomleft}>\n            </div>\n\n\n        </>\n    )\n}\n\nexport default MapControls;","import Loading from 'components/global/Loading/Loading';\nimport L from 'leaflet';\nimport React from 'react';\nimport { MapContainer } from 'react-leaflet';\nimport { ActionType, useStateContext } from '_libs/_state';\nimport '_libs/_styles/leaflet.scss'\n// import \"_libs/_styles/leaflet1.7.1.css\";\nimport styles from './LeafletBase.module.scss';\nimport config from '_libs/_config'\nimport GeoData from './GeoData/GeoData';\nimport Miyawaki from './Miyawaki/Miyawaki';\nimport ModalContent from './GeoData/ModalContent';\nimport MapControls from './MapControls/MapControls'\n\ntype Props = {\n  variant: string\n}\nconst LeafletBase: React.FC<Props> = ({variant}) => {\n  const { dispatch } = useStateContext()\n  const { data } = useStateContext().state.state;\n  const c: L.LatLng = new L.LatLng(config.map.centerDefault.lat, config.map.centerDefault.lng);\n  function setModalContent(data?: { municipality: string, groups: TGNFG[] }) {\n\n    dispatch && dispatch({\n      type: ActionType.SET_MODAL,\n      payload: <ModalContent {...{ ...data }} />\n    })\n    // setState({\n    //   ...state,\n    //   modalContent: data || false\n    // })\n  }\n\n  return (\n    data.grupper.length > 0 && data.updated > 0 ?\n    <div id=\"LeafletBase\" className={`${styles.LeafletBase} ${variant ? styles[variant] : ''}`} data-testid=\"LeafletBase\">\n        <MapContainer\n          className={styles.mapContainer}\n          center={[c.lat, c.lng]}\n          zoom={6}\n          scrollWheelZoom={true}\n          dragging={true}\n        >\n          <GeoData\n            attribution=\"<a href='https://github.com/magnuslarsen/geoJSON-Danish-municipalities'>GeoJson</a>\"\n            grupper={data.grupper}\n            setModalContent={setModalContent}\n          />\n          {/* <Miyawaki {...{}} /> */}\n          <MapControls />\n        </MapContainer>\n    </div> \n   : <Loading />\n);\n}\n\nexport default LeafletBase;\n","import LeafletBase from 'components/ui/LeafletBase/LeafletBase';\nimport LeafletComp from 'components/ui/LeafletComp/LeafletComp.lazy';\nimport LeafletCompMiyawaki from 'components/ui/LeafletCompMiyawaki/LeafletCompMiyawaki';\nimport React from 'react';\nimport styles from './Map.module.scss';\n\nconst Map: React.FC<any> = ({variant}) => {\nreturn (\n  <div className={`${styles.Map} ${styles[variant]}`} data-testid=\"Map\">\n    {/* <LeafletCompMiyawaki variant={variant}/> */}\n    <LeafletBase variant={variant} />\n  </div>\n);\n}\nexport default Map;\n"],"sourceRoot":""}